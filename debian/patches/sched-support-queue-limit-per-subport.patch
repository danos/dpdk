--- a/lib/librte_sched/rte_sched.h
+++ b/lib/librte_sched/rte_sched.h
@@ -242,6 +242,20 @@ struct rte_sched_port *
 rte_sched_port_config(struct rte_sched_port_params *params);
 
 /**
+ * Hierarchical scheduler port configuration
+ *
+ * @param params
+ *   Port scheduler configuration parameter structure
+ * @param size_queue_array
+ *   Pre-calculated size of the port's queue-array
+ * @return
+ *   Handle to port scheduler instance upon success or NULL otherwise.
+ */
+struct rte_sched_port *
+rte_sched_port_config_v2(struct rte_sched_port_params *params,
+			 uint32_t size_queue_array);
+
+/**
  * Hierarchical scheduler port free
  *
  * @param port
@@ -288,6 +302,26 @@ rte_sched_subport_config(struct rte_sche
 	struct rte_sched_subport_params *params);
 
 /**
+ * Hierarchical scheduler subport configuration
+ *
+ * @param port
+ *   Handle to port scheduler instance
+ * @param subport_id
+ *   Subport ID
+ * @param params
+ *   Subport configuration parameters
+ * @param qsize
+ *   Array of traffic-class maximum queue-lengths
+ * @return
+ *   0 upon success, error code otherwise
+ */
+int
+rte_sched_subport_config_v2(struct rte_sched_port *port,
+			    uint32_t subport_id,
+			    struct rte_sched_subport_params *params,
+			    uint16_t *qsize);
+
+/**
  * Hierarchical scheduler pipe configuration
  *
  * @param port
@@ -318,6 +352,20 @@ rte_sched_pipe_config(struct rte_sched_p
 uint32_t
 rte_sched_port_get_memory_footprint(struct rte_sched_port_params *params);
 
+/**
+ * Hierarchical scheduler memory footprint size per port
+ *
+ * @param params
+ *   Port scheduler configuration parameter structure
+ * @param size_queue_array
+ *   The required size of the port's queue-array
+ * @return
+ *   Memory footprint size in bytes upon success, 0 otherwise
+ */
+uint32_t
+rte_sched_port_get_memory_footprint_v2(struct rte_sched_port_params *params,
+				       uint32_t size_queue_array);
+
 /*
  * Statistics
  *
--- a/lib/librte_sched/rte_sched.c
+++ b/lib/librte_sched/rte_sched.c
@@ -58,6 +58,7 @@ struct rte_sched_subport {
 	uint64_t tc_time; /* time of next update */
 	uint32_t tc_credits_per_period[RTE_SCHED_TRAFFIC_CLASSES_PER_PIPE];
 	uint32_t tc_credits[RTE_SCHED_TRAFFIC_CLASSES_PER_PIPE];
+	uint16_t qsize[RTE_SCHED_TRAFFIC_CLASSES_PER_PIPE];
 	uint32_t tc_period;
 
 	/* TC oversubscription */
@@ -71,6 +72,11 @@ struct rte_sched_subport {
 
 	/* Statistics */
 	struct rte_sched_subport_stats stats;
+
+	/* Queue base calculation */
+	uint32_t qsize_add[RTE_SCHED_QUEUES_PER_PIPE];
+	uint32_t qsize_sum;
+	uint32_t qoffset;
 };
 
 struct rte_sched_pipe_profile {
@@ -216,10 +222,6 @@ struct rte_sched_port {
 	struct rte_mbuf **pkts_out;
 	uint32_t n_pkts_out;
 
-	/* Queue base calculation */
-	uint32_t qsize_add[RTE_SCHED_QUEUES_PER_PIPE];
-	uint32_t qsize_sum;
-
 	/* Large data structures */
 	struct rte_sched_subport *subport;
 	struct rte_sched_pipe *pipe;
@@ -261,19 +263,28 @@ rte_sched_port_queues_per_port(struct rt
 static inline struct rte_mbuf **
 rte_sched_port_qbase(struct rte_sched_port *port, uint32_t qindex)
 {
-	uint32_t pindex = qindex >> RTE_SCHED_TC_WRR_BITS;
 	uint32_t qpos = qindex & RTE_SCHED_TC_WRR_MASK;
-
-	return (port->queue_array + pindex *
-		port->qsize_sum + port->qsize_add[qpos]);
+	uint32_t subport_id = qindex / rte_sched_port_queues_per_subport(port);
+	struct rte_sched_subport *subport = port->subport + subport_id;
+	uint32_t pipe_id;
+
+	pipe_id = qindex -
+		(subport_id * rte_sched_port_queues_per_subport(port));
+	pipe_id = pipe_id / RTE_SCHED_QUEUES_PER_PIPE;
+
+	return (port->queue_array + subport->qoffset +
+		(pipe_id * subport->qsize_sum) +
+		subport->qsize_add[qpos]);
 }
 
 static inline uint16_t
 rte_sched_port_qsize(struct rte_sched_port *port, uint32_t qindex)
 {
 	uint32_t tc = (qindex >> RTE_SCHED_WRR_BITS) & RTE_SCHED_TC_MASK;
+	uint32_t subport_id = qindex / rte_sched_port_queues_per_subport(port);
+	struct rte_sched_subport *subport = port->subport + subport_id;
 
-	return port->qsize[tc];
+	return subport->qsize[tc];
 }
 
 static int
@@ -381,7 +392,9 @@ rte_sched_port_check_params(struct rte_s
 }
 
 static uint32_t
-rte_sched_port_get_array_base(struct rte_sched_port_params *params, enum rte_sched_port_array array)
+rte_sched_port_get_array_base(struct rte_sched_port_params *params,
+			      enum rte_sched_port_array array,
+			      uint32_t size_queue_array)
 {
 	uint32_t n_subports_per_port = params->n_subports_per_port;
 	uint32_t n_pipes_per_subport = params->n_pipes_per_subport;
@@ -396,16 +409,19 @@ rte_sched_port_get_array_base(struct rte
 	uint32_t size_pipe_profiles
 		= RTE_SCHED_PIPE_PROFILES_PER_PORT * sizeof(struct rte_sched_pipe_profile);
 	uint32_t size_bmp_array = rte_bitmap_get_memory_footprint(n_queues_per_port);
-	uint32_t size_per_pipe_queue_array, size_queue_array;
+	uint32_t size_per_pipe_queue_array;
 
 	uint32_t base, i;
 
-	size_per_pipe_queue_array = 0;
-	for (i = 0; i < RTE_SCHED_TRAFFIC_CLASSES_PER_PIPE; i++) {
-		size_per_pipe_queue_array += RTE_SCHED_QUEUES_PER_TRAFFIC_CLASS
-			* params->qsize[i] * sizeof(struct rte_mbuf *);
+	if (size_queue_array == 0) {
+		size_per_pipe_queue_array = 0;
+		for (i = 0; i < RTE_SCHED_TRAFFIC_CLASSES_PER_PIPE; i++) {
+			size_per_pipe_queue_array +=
+				RTE_SCHED_QUEUES_PER_TRAFFIC_CLASS
+				* params->qsize[i] * sizeof(struct rte_mbuf *);
+		}
+		size_queue_array = n_pipes_per_port * size_per_pipe_queue_array;
 	}
-	size_queue_array = n_pipes_per_port * size_per_pipe_queue_array;
 
 	base = 0;
 
@@ -440,8 +456,9 @@ rte_sched_port_get_array_base(struct rte
 	return base;
 }
 
-uint32_t
-rte_sched_port_get_memory_footprint(struct rte_sched_port_params *params)
+static uint32_t
+rte_sched_port_get_memory_footprint_common(struct rte_sched_port_params *params,
+					   uint32_t size_queue_array)
 {
 	uint32_t size0, size1;
 	int status;
@@ -455,36 +472,78 @@ rte_sched_port_get_memory_footprint(stru
 	}
 
 	size0 = sizeof(struct rte_sched_port);
-	size1 = rte_sched_port_get_array_base(params, e_RTE_SCHED_PORT_ARRAY_TOTAL);
+	size1 = rte_sched_port_get_array_base(params,
+					      e_RTE_SCHED_PORT_ARRAY_TOTAL,
+					      size_queue_array);
 
 	return size0 + size1;
 }
 
+uint32_t
+rte_sched_port_get_memory_footprint(struct rte_sched_port_params *params)
+{
+	return rte_sched_port_get_memory_footprint_common(params, 0);
+}
+
+uint32_t
+rte_sched_port_get_memory_footprint_v2(struct rte_sched_port_params *params,
+				       uint32_t size_queue_array)
+{
+	return rte_sched_port_get_memory_footprint_common(params,
+							  size_queue_array);
+}
+
 static void
-rte_sched_port_config_qsize(struct rte_sched_port *port)
+rte_sched_subport_config_qsize(struct rte_sched_port *port,
+			       uint32_t subport_id,
+			       uint16_t *qsize)
 {
+	struct rte_sched_subport *subport = port->subport + subport_id;
 	uint32_t tc;
 	uint32_t q;
 	uint32_t index;
 
+	for (tc = 0; tc < RTE_SCHED_TRAFFIC_CLASSES_PER_PIPE; tc++) {
+		if (qsize == NULL)
+			/* The subport inherits its qsizes from the port */
+			subport->qsize[tc] = port->qsize[tc];
+		else
+			/* The subport has explicity configure qsizes */
+			subport->qsize[tc] = qsize[tc];
+	}
+
 	index = 0;
-	port->qsize_add[index] = 0;
+	subport->qsize_add[index] = 0;
 	for (tc = 0; tc < RTE_SCHED_TRAFFIC_CLASSES_PER_PIPE; tc++) {
                 if (tc != 0)
-			port->qsize_add[index] = port->qsize_add[index - 1] +
-				port->qsize[tc - 1];
+			subport->qsize_add[index] =
+				subport->qsize_add[index - 1] +
+				subport->qsize[tc - 1];
 
 		for (q = 0; q < RTE_SCHED_QUEUES_PER_TRAFFIC_CLASS; q++) {
 			if (q != 0)
-				port->qsize_add[index] =
-					port->qsize_add[index - 1] +
-					port->qsize[tc];
+				subport->qsize_add[index] =
+					subport->qsize_add[index - 1] +
+					subport->qsize[tc];
 
 			index++;
 		}
 	}
-	port->qsize_sum = port->qsize_add[index - 1] +
-		port->qsize[RTE_SCHED_MAX_TC];
+	subport->qsize_sum = subport->qsize_add[index - 1] +
+		subport->qsize[RTE_SCHED_MAX_TC];
+
+	/*
+	 * Accumulate each subport's qsize_sum across all subports to
+	 * calculate the queue-array offset for this subport.
+	 * This only works if subports are configured sequentially.
+	 */
+	if (subport_id != 0) {
+		struct rte_sched_subport *prev = port->subport +
+			(subport_id - 1);
+
+		subport->qoffset = prev->qoffset +
+			(prev->qsize_sum * port->n_pipes_per_subport);
+	}
 }
 
 static char *
@@ -523,6 +582,24 @@ rte_sched_build_wrr_cost_string(struct r
 	return output_str;
 }
 
+static char *
+rte_sched_build_queue_size_string(uint16_t *qsize, char *output_str)
+{
+	uint32_t tc;
+	int str_len;
+
+	str_len = sprintf(output_str, "[");
+	for (tc = 0; tc < RTE_SCHED_TRAFFIC_CLASSES_PER_PIPE; tc++) {
+		str_len += sprintf(output_str + str_len, "%u",
+				   qsize[tc]);
+		if (tc != RTE_SCHED_MAX_TC)
+			str_len += sprintf(output_str + str_len, ", ");
+	}
+	sprintf(output_str + str_len, "]");
+	return output_str;
+}
+
+
 static void
 rte_sched_port_log_pipe_profile(struct rte_sched_port *port, uint32_t i)
 {
@@ -702,16 +779,12 @@ rte_sched_port_config_pipe_profile_table
 	}
 }
 
-struct rte_sched_port *
-rte_sched_port_config(struct rte_sched_port_params *params)
+static struct rte_sched_port *
+rte_sched_port_config_common(struct rte_sched_port_params *params,
+			     uint32_t mem_size)
 {
 	struct rte_sched_port *port = NULL;
-	uint32_t mem_size, bmp_mem_size, n_queues_per_port, i, cycles_per_byte;
-
-	/* Check user parameters. Determine the amount of memory to allocate */
-	mem_size = rte_sched_port_get_memory_footprint(params);
-	if (mem_size == 0)
-		return NULL;
+	uint32_t bmp_mem_size, n_queues_per_port, i, cycles_per_byte;
 
 	/* Allocate memory to store the data structures */
 	port = rte_zmalloc_socket("qos_params", mem_size, RTE_CACHE_LINE_SIZE,
@@ -774,30 +847,34 @@ rte_sched_port_config(struct rte_sched_p
 	port->pkts_out = NULL;
 	port->n_pkts_out = 0;
 
-	/* Queue base calculation */
-	rte_sched_port_config_qsize(port);
-
 	/* Large data structures */
 	port->subport = (struct rte_sched_subport *)
 		(port->memory + rte_sched_port_get_array_base(params,
-							      e_RTE_SCHED_PORT_ARRAY_SUBPORT));
+							      e_RTE_SCHED_PORT_ARRAY_SUBPORT,
+							      0));
 	port->pipe = (struct rte_sched_pipe *)
 		(port->memory + rte_sched_port_get_array_base(params,
-							      e_RTE_SCHED_PORT_ARRAY_PIPE));
+							      e_RTE_SCHED_PORT_ARRAY_PIPE,
+							      0));
 	port->queue = (struct rte_sched_queue *)
 		(port->memory + rte_sched_port_get_array_base(params,
-							      e_RTE_SCHED_PORT_ARRAY_QUEUE));
+							      e_RTE_SCHED_PORT_ARRAY_QUEUE,
+							      0));
 	port->queue_extra = (struct rte_sched_queue_extra *)
 		(port->memory + rte_sched_port_get_array_base(params,
-							      e_RTE_SCHED_PORT_ARRAY_QUEUE_EXTRA));
+							      e_RTE_SCHED_PORT_ARRAY_QUEUE_EXTRA,
+							      0));
 	port->pipe_profiles = (struct rte_sched_pipe_profile *)
 		(port->memory + rte_sched_port_get_array_base(params,
-							      e_RTE_SCHED_PORT_ARRAY_PIPE_PROFILES));
+							      e_RTE_SCHED_PORT_ARRAY_PIPE_PROFILES,
+							      0));
 	port->bmp_array =  port->memory
-		+ rte_sched_port_get_array_base(params, e_RTE_SCHED_PORT_ARRAY_BMP_ARRAY);
+		+ rte_sched_port_get_array_base(params, e_RTE_SCHED_PORT_ARRAY_BMP_ARRAY,
+						0);
 	port->queue_array = (struct rte_mbuf **)
 		(port->memory + rte_sched_port_get_array_base(params,
-							      e_RTE_SCHED_PORT_ARRAY_QUEUE_ARRAY));
+							      e_RTE_SCHED_PORT_ARRAY_QUEUE_ARRAY,
+							      0));
 
 	/* Pipe profile table */
 	rte_sched_port_config_pipe_profile_table(port, params);
@@ -820,6 +897,35 @@ rte_sched_port_config(struct rte_sched_p
 	return port;
 }
 
+
+struct rte_sched_port *
+rte_sched_port_config(struct rte_sched_port_params *params)
+{
+	uint32_t mem_size;
+
+	/* Check user parameters. Determine the amount of memory to allocate */
+	mem_size = rte_sched_port_get_memory_footprint(params);
+	if (mem_size == 0)
+		return NULL;
+
+	return rte_sched_port_config_common(params, mem_size);
+}
+
+struct rte_sched_port *
+rte_sched_port_config_v2(struct rte_sched_port_params *params,
+			 uint32_t queue_array_size)
+{
+	uint32_t mem_size;
+
+	/* Check user parameters. Determine the amount of memory to allocate */
+	mem_size = rte_sched_port_get_memory_footprint_common(params,
+							      queue_array_size);
+	if (mem_size == 0)
+		return NULL;
+
+	return rte_sched_port_config_common(params, mem_size);
+}
+
 void
 rte_sched_port_free(struct rte_sched_port *port)
 {
@@ -853,13 +959,16 @@ rte_sched_port_log_subport_config(struct
 {
 	struct rte_sched_subport *s = port->subport + i;
 	char credits_str[(13 * RTE_SCHED_TRAFFIC_CLASSES_PER_PIPE) + 3];
+	char queue_size_str[(7 * RTE_SCHED_TRAFFIC_CLASSES_PER_PIPE) + 3];
 
 	rte_sched_build_credit_array_string(s->tc_credits_per_period,
 					    credits_str);
+	rte_sched_build_queue_size_string(s->qsize, queue_size_str);
 
 	RTE_LOG(DEBUG, SCHED, "Low level config for subport %u:\n"
 		"    Token bucket: period = %u, credits per period = %u, size = %u\n"
 		"    Traffic classes: period = %u, credits per period = %s\n"
+		"    Traffic class queue-sizes: %s\n"
 		"    Traffic class 3 oversubscription: wm min = %u, wm max = %u\n",
 		i,
 
@@ -871,17 +980,20 @@ rte_sched_port_log_subport_config(struct
 		/* Traffic classes */
 		s->tc_period,
 		credits_str,
+		queue_size_str,
 
 		/* Traffic class 3 oversubscription */
 		s->tc_ov_wm_min,
 		s->tc_ov_wm_max);
 }
 
-int
-rte_sched_subport_config(struct rte_sched_port *port,
-	uint32_t subport_id,
-	struct rte_sched_subport_params *params)
+static int
+rte_sched_subport_config_common(struct rte_sched_port *port,
+				uint32_t subport_id,
+				struct rte_sched_subport_params *params,
+				uint16_t *qsize)
 {
+
 	struct rte_sched_subport *s;
 	uint32_t i;
 
@@ -925,15 +1037,13 @@ rte_sched_subport_config(struct rte_sche
 
 	/* Traffic Classes (TCs) */
 	s->tc_period = rte_sched_time_ms_to_bytes(params->tc_period, port->rate);
+	s->tc_time = port->time + s->tc_period;
 	for (i = 0; i < RTE_SCHED_TRAFFIC_CLASSES_PER_PIPE; i++) {
 		s->tc_credits_per_period[i]
 			= rte_sched_time_ms_to_bytes(params->tc_period,
 						     params->tc_rate[i]);
-	}
-	s->tc_time = port->time + s->tc_period;
-	for (i = 0; i < RTE_SCHED_TRAFFIC_CLASSES_PER_PIPE; i++)
 		s->tc_credits[i] = s->tc_credits_per_period[i];
-
+	}
 #ifdef RTE_SCHED_SUBPORT_TC_OV
 	/* TC oversubscription */
 	s->tc_ov_wm_min = port->mtu;
@@ -946,12 +1056,31 @@ rte_sched_subport_config(struct rte_sche
 	s->tc_ov_rate = 0;
 #endif
 
+	rte_sched_subport_config_qsize(port, subport_id, qsize);
 	rte_sched_port_log_subport_config(port, subport_id);
 
 	return 0;
 }
 
 int
+rte_sched_subport_config(struct rte_sched_port *port,
+			 uint32_t subport_id,
+			 struct rte_sched_subport_params *params)
+{
+	return rte_sched_subport_config_common(port, subport_id, params, NULL);
+}
+
+int
+rte_sched_subport_config_v2(struct rte_sched_port *port,
+			    uint32_t subport_id,
+			    struct rte_sched_subport_params *params,
+			    uint16_t *qsize)
+{
+	return rte_sched_subport_config_common(port, subport_id, params,
+					       qsize);
+}
+
+int
 rte_sched_pipe_config(struct rte_sched_port *port,
 	uint32_t subport_id,
 	uint32_t pipe_id,
--- a/lib/librte_sched/rte_sched_version.map
+++ b/lib/librte_sched/rte_sched_version.map
@@ -13,15 +13,18 @@ DPDK_2.0 {
 	rte_red_set_scaling;
 	rte_sched_pipe_config;
 	rte_sched_port_config;
+	rte_sched_port_config_v2;
 	rte_sched_port_dequeue;
 	rte_sched_port_enqueue;
 	rte_sched_port_free;
 	rte_sched_port_get_memory_footprint;
+	rte_sched_port_get_memory_footprint_v2;
 	rte_sched_port_pkt_read_color;
 	rte_sched_port_pkt_read_tree_path;
 	rte_sched_port_pkt_write;
 	rte_sched_queue_read_stats;
 	rte_sched_subport_config;
+	rte_sched_subport_config_v2;
 	rte_sched_subport_read_stats;
 
 	local: *;
